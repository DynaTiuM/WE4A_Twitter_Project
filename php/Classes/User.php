<?php

require_once ("Entity.php");

class User extends Entity
{
    private $email;
    private $lastName;
    private $firstName;
    private $dateOfBirth;
    private $organisation;
    private $bio;

    private static $instance;

    public function __construct($conn, $db)
    {
        parent::__construct($conn, $db); // TODO: Change the autogenerated stub
    }

    // Modèle singleton
    public static function getInstance($conn, $db) {
        if (self::$instance === null) {
            self::$instance = new User($conn, $db);
        }

        return self::$instance;
    }

    public static function getInstanceById($conn, $db, $username) {
        $user = new User($conn, $db);

        $query = "SELECT * FROM utilisateur WHERE username = ?";
        $stmt = $conn->prepare($query);
        $stmt->bind_param('s', $username);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();

            $user->username = $row['username'];
            $user->email = $row['email'];
            $user->organisation = $row['organisation'];
            $user->bio = $row['bio'];
            $user->dateOfBirth = $row['date_de_naissance'];
            $user->lastName = $row['nom'];
            $user->firstName = $row['prenom'];

            return $user;
        } else {
            return null; // Aucun utilisateur trouvé avec cet ID
        }
    }


    public static function exists($conn, $username) {
        $stmt = $conn->prepare("SELECT * FROM utilisateur WHERE username = ?");
        $stmt->bind_param("s", $username);
        $stmt->execute();
        $result = $stmt->get_result();

        return $result->num_rows > 0;
    }

    public function isFollowing($auteur_username) {
        $sql = "SELECT COUNT(*) as count 
            FROM suivre
            WHERE utilisateur_username = ?
              AND (
                  (suivi_type = 'utilisateur' AND suivi_id_utilisateur = ?)
                OR (suivi_type = 'animal' AND suivi_id_animal IN (SELECT animal_id FROM message_animaux WHERE message_id IN (SELECT id FROM message WHERE auteur_username = ?)))
                  )";

        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("sss", $this->username, $auteur_username, $auteur_username);
        $stmt->execute();
        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            $row = $result->fetch_assoc();
            if($row['count'] > 0)
                return true;
        }

        return false;
    }

    public function checkLogin(): array {
        $error = NULL;
        $loginSuccessful = false;

        if(isset($_POST["username"]) && isset($_POST["password"])){
            $this->username = $this->db->secureString_ForSQL($_POST["username"]);
            $password = $_POST["password"];
            $loginAttempted = true;
        }
        elseif (isset($_SESSION["username"] )) {
            $this->username = $_SESSION["username"];
            $loginAttempted = true;
        }
        else {
            $loginAttempted = false;
        }

        if ($loginAttempted){
            $query = "SELECT * FROM `utilisateur` WHERE username = '".$this->username."'";
            $result = $this->conn->query($query);

            if ($result->num_rows > 0){
                $row = $result->fetch_assoc();
                if(!isset($password)) {
                    $password = password_hash($row['mot_de_passe'], PASSWORD_DEFAULT);
                }
                $hashed_password = $row['mot_de_passe'];

                if (password_verify($password, $hashed_password)) {
                    session_start();
                    $_SESSION['username'] = $this->username;
                    $loginSuccessful = true;
                } else {
                    $error = "Ce couple login/mot de passe n'existe pas. Créez un Compte";
                }
            }
            else {
                $error = "Ce couple login/mot de passe n'existe pas. Créez un Compte";
            }
        }

        return array($loginSuccessful, $loginAttempted, $error);
    }
    public function isLoggedIn(): bool {
        $loginAttempted = false;
        if (isset($_SESSION["username"])) {
            $this->username = $_SESSION["username"];
            $loginAttempted = true;
        }
        if ($loginAttempted) {
            $query = "SELECT mot_de_passe FROM utilisateur WHERE username = ?";
            $stmt = $this->conn->prepare($query);
            $stmt->bind_param("s", $this->username);
            $stmt->execute();
            $result = $stmt->get_result();
            if(!$result) {
                return false;
            }
            $password = $result->fetch_assoc()['mot_de_passe'];
            $query = "SELECT * FROM `utilisateur` WHERE username = ? AND mot_de_passe = ?";
            $stmt = $this->conn->prepare($query);
            $stmt->bind_param("ss", $this->username, $password);
            $stmt->execute();
            $result = $stmt->get_result();
            if ($result->num_rows > 0) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }

    public function getUsername() {
        return $this->username;
    }

    public function getUserInformation() {
        $query = "SELECT * FROM utilisateur WHERE username = ?";
        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("s", $this->username);
        $stmt->execute();

        $result = $stmt->get_result();

        if ($result->num_rows > 0) {
            return $result->fetch_assoc();
        }
    }

    public function getFirstName() {
        return $this->firstName;
    }
    public function getLastName() {
        return $this->lastName;
    }
    public function getDateOfBirth() {
        return $this->dateOfBirth;
    }
    public function getBio() {
        return $this->bio;
    }

    public function isOrganization() {
        return $this->organisation == 1;
    }


    public function getPets() {
        $query = "SELECT * FROM animal WHERE maitre_username = ?";
        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("s", $this->username);
        $stmt->execute();

        return $stmt->get_result();
    }

    public function likeMessage($id_message) {
        $id_message = $this->db->secureString_ForSQL($id_message);
        $date = date('Y-m-d H:i:s');

        $message = new Message($this->conn, $this->db);
        $message->setId($id_message);

        // Vérifier si le message est déjà liké par l'utilisateur
        if (!$message->isMessageLikedByUser($this->username)) {
            $stmt = $this->conn->prepare("INSERT INTO like_message (message_id, utilisateur_username, date) VALUES (?, ?, ?)");
            $stmt->bind_param("sss", $id_message, $this->username, $date);
            $stmt->execute();
            $stmt->close();

            $stmt = $this->conn->prepare("SELECT auteur_username FROM  message WHERE id = ?");
            $stmt->bind_param("s", $id_message);
            $stmt->execute();
            $result = $stmt->get_result();
            $author_username = $result->fetch_assoc()['auteur_username'];
            $stmt->close();

            require_once ("../Classes/Notification.php");
            $notification = new Notification($this->conn, $this->db);
            if(!$notification->isAlreadySent($author_username, $id_message))
                $notification->createNotificationForLike($author_username, $id_message);
        } else {
            $stmt = $this->conn->prepare("DELETE FROM like_message WHERE message_id = ? AND utilisateur_username = ?");
            $stmt->bind_param("ss", $id_message, $this->username);
            $stmt->execute();
            $stmt->close();
        }
    }

    public function changePassword($conn, $new_password) {
        $password = password_hash($new_password, PASSWORD_DEFAULT);
        $stmt = $conn->prepare("UPDATE utilisateur SET mot_de_passe = ? WHERE username = ?");
        $stmt->bind_param("ss", $password, $this->username);
        $stmt->execute();
    }

    public function updateProfile($avatar =null, $firstName, $lastName, $dateOfBirth, $bio, $newPassword, $confirmationNewPassword) {
        $query = "UPDATE utilisateur SET prenom = ?, nom = ?, date_de_naissance = ?, bio = ?";

        $params = array($firstName, $lastName, $dateOfBirth, $bio);
        $types = "ssss";

        if(isset($avatar) && is_uploaded_file($avatar['tmp_name'])) {
            require_once ("../Classes/Image.php");
            $avatar = new Image($avatar);
            $avatar->formatImage();
            $query .= ", avatar = ?";
            $params[] = $avatar->getFormatedImage();
            $types .= "s";
        }

        if (!empty($newPassword)) {
            if(!$this->comparePasswords($newPassword, $confirmationNewPassword)) {
                return "Le nouveau mot de passe et sa confirmation ne sont pas identiques !";
            }
            $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);
            $query .= ", mot_de_passe = ?";
            $params[] = $hashedPassword;
            $types .= "s";
        }

        $query .= " WHERE username = ?";

        $stmt = $this->conn->prepare($query);
        $params[] = $this->username;
        $types .= "s";

        $stmt->bind_param($types, ...$params);
        $stmt->execute();

        // Mettre à jour les attributs de l'objet User après la mise à jour réussie
        if ($stmt->affected_rows > 0) {
            $this->firstName = $firstName;
            $this->lastName = $lastName;
            $this->dateOfBirth = $dateOfBirth;
            $this->bio = $bio;
        }

        return "Profil modifié avec succès !";
    }


    public function numFollowing() {
        $query = "SELECT COUNT(*) FROM suivre WHERE utilisateur_username = ?";
        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("s", $this->username);
        $stmt->execute();
        $result = $stmt->get_result();

        return $result->fetch_column();
    }

    public function checkNewAccountForm(): array {
        $creationAttempted = false;
        $creationSuccessful = false;
        $error = NULL;
        $completed = isset($_POST["email"]) && isset($_POST["username"]) && isset($_POST["password"]) && isset($_POST["confirm"])
            && isset($_POST["prenom"]) && isset($_POST["nom"])
            && isset($_POST["date_de_naissance"]) &&  isset($_POST["organisation"]);

        //Données reçues via formulaire?
        if($completed && $this->verifyUnicity($_POST['username'])){

            $creationAttempted = true;

            //Form is only valid if password == confirm, and username is at least 4 char long
            if ( strlen($_POST["username"]) < 4 ){
                $error = "Un nom utilisateur doit avoir une longueur d'au moins 4 lettres.";
            }
            elseif (!$this->comparePasswords($_POST["password"], $_POST["confirm"])){
                $error = "Le mot de passe et sa confirmation sont différents.";
            }
            elseif ($this->calculateAge($_POST["date_de_naissance"]) < 13) {
                $error = "Vous devez être âgé d'au moins 13 ans pour vous inscrire sur notre plateforme.";
            }
            else {
                $this->email = $this->db->secureString_ForSQL($_POST["email"]);
                $this->username = $this->db->secureString_ForSQL($_POST["username"]);
                $this->lastname = $this->db->secureString_ForSQL($_POST["nom"]);
                $this->firstname = $this->db->secureString_ForSQL($_POST["prenom"]);
                $this->dateOfBirth = $_POST["date_de_naissance"];
                $this->organisation = $_POST["organisation"];
                $this->avatar = file_get_contents('../images/default_avatar.png');
                $avatarBLOB = mysqli_real_escape_string($this->conn, $this->avatar);
                $this->password = password_hash($_POST["password"], PASSWORD_DEFAULT);

                $query = "INSERT INTO `utilisateur` VALUES ('$this->email', '$this->username', '$this->lastname', '$this->firstname', '$this->dateOfBirth', '$this->password', '$avatarBLOB', '$this->organisation', null )";
                $this->conn->query($query);

                if( mysqli_affected_rows($this->conn) == 0 )
                {
                    $error = "Erreur lors de l'insertion SQL. Essayez un nom/password sans caractères spéciaux.";
                }
                else {
                    $creationSuccessful = true;
                }
            }
        }
        else {
            $error = "Nom d'utilisateur déjà existant.";
        }

        return array($creationAttempted, $creationSuccessful, $error);
    }

    /**
     * @throws Exception
     */
    private function calculateAge($dateOfBirth): int {
        $dob = new DateTime($dateOfBirth);
        $now = new DateTime();
        $interval = $now->diff($dob);
        return $interval->y;
    }

    private function comparePasswords($password, $confirmPassword): bool {
        return $password == $confirmPassword;
    }

    function setUserInformation() {
        $sql = "SELECT * FROM utilisateur WHERE username = ?";
        $stmt = $this->conn->prepare($sql);
        $stmt->bind_param("s", $this->username);
        $stmt->execute();
        $result = $stmt->get_result();
        $row = $result->fetch_assoc();

        $this->email = $this->db->secureString_ForSQL($row["email"]);
        $this->username = $this->db->secureString_ForSQL($row["username"]);
        $this->lastname = $this->db->secureString_ForSQL($row["nom"]);
        $this->firstname = $this->db->secureString_ForSQL($row["prenom"]);
        $this->dateOfBirth = $row["date_de_naissance"];
        $this->organisation = $row["organisation"];
    }

    function displayPets() {
        $query = "SELECT * FROM animal WHERE maitre_username = ?";
        $stmt = $this->conn->prepare($query);
        $stmt->bind_param("s", $this->username);
        $stmt->execute();

        return $stmt->get_result();
    }

    public function loadAvatar() {
        $sql = "SELECT avatar FROM utilisateur WHERE username = ?";
        return $this->selectSQLAvatar($sql);
    }
}